//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CMP_API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CMPEntities : DbContext
    {
        public CMPEntities()
            : base("name=CMPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<COUNTRy> COUNTRies { get; set; }
        public virtual DbSet<COUNTRY1> COUNTRies1 { get; set; }
        public virtual DbSet<CourseDocument> CourseDocuments { get; set; }
        public virtual DbSet<CourseImage> CourseImages { get; set; }
        public virtual DbSet<CourseMaster> CourseMasters { get; set; }
        public virtual DbSet<ExamSchedule> ExamSchedules { get; set; }
        public virtual DbSet<MultiSubCategory> MultiSubCategories { get; set; }
        public virtual DbSet<OrderMaster> OrderMasters { get; set; }
        public virtual DbSet<ParnerMaster> ParnerMasters { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TrainingSchedule> TrainingSchedules { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int AddCourseImages(Nullable<int> courseID, string imagePath, Nullable<byte> isDefault, Nullable<int> createdUser)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(byte));
    
            var createdUserParameter = createdUser.HasValue ?
                new ObjectParameter("CreatedUser", createdUser) :
                new ObjectParameter("CreatedUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCourseImages", courseIDParameter, imagePathParameter, isDefaultParameter, createdUserParameter);
        }
    
        public virtual int DeleteCourseImages(Nullable<int> courseImageId)
        {
            var courseImageIdParameter = courseImageId.HasValue ?
                new ObjectParameter("CourseImageId", courseImageId) :
                new ObjectParameter("CourseImageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCourseImages", courseImageIdParameter);
        }
    
        public virtual int DeleteDocument(Nullable<int> documentID)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDocument", documentIDParameter);
        }
    
        public virtual int DeleteExam(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExam", examIDParameter);
        }
    
        public virtual int Deletetraining(Nullable<int> trainingID)
        {
            var trainingIDParameter = trainingID.HasValue ?
                new ObjectParameter("TrainingID", trainingID) :
                new ObjectParameter("TrainingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deletetraining", trainingIDParameter);
        }
    
        public virtual ObjectResult<FetchAllBootcamps_Result> FetchAllBootcamps(Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAllBootcamps_Result>("FetchAllBootcamps", pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<FetchAllSubCategory_Result> FetchAllSubCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAllSubCategory_Result>("FetchAllSubCategory");
        }
    
        public virtual ObjectResult<FetchAllSubCategoryWithOutStatus_Result> FetchAllSubCategoryWithOutStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAllSubCategoryWithOutStatus_Result>("FetchAllSubCategoryWithOutStatus");
        }
    
        public virtual ObjectResult<FetchAllTrendingCourses_Result> FetchAllTrendingCourses(Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<int> category)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAllTrendingCourses_Result>("FetchAllTrendingCourses", pageNumberParameter, pageSizeParameter, categoryParameter);
        }
    
        public virtual ObjectResult<FetchCourseDetailsBasedOnCourseID_Result> FetchCourseDetailsBasedOnCourseID(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCourseDetailsBasedOnCourseID_Result>("FetchCourseDetailsBasedOnCourseID", courseIDParameter);
        }
    
        public virtual ObjectResult<FetchCourseMaster_Result> FetchCourseMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCourseMaster_Result>("FetchCourseMaster");
        }
    
        public virtual ObjectResult<FetchCoursesToWebsite_Result> FetchCoursesToWebsite(string keyword, Nullable<int> category, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCoursesToWebsite_Result>("FetchCoursesToWebsite", keywordParameter, categoryParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<FetchDocumentDetailsBasedOnCourseID_Result> FetchDocumentDetailsBasedOnCourseID(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchDocumentDetailsBasedOnCourseID_Result>("FetchDocumentDetailsBasedOnCourseID", courseIDParameter);
        }
    
        public virtual ObjectResult<FetchExamDetailsBasedOnCourseID_Result> FetchExamDetailsBasedOnCourseID(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchExamDetailsBasedOnCourseID_Result>("FetchExamDetailsBasedOnCourseID", courseIDParameter);
        }
    
        public virtual ObjectResult<FetchTrainingDetailsBasedOnCourseID_Result> FetchTrainingDetailsBasedOnCourseID(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchTrainingDetailsBasedOnCourseID_Result>("FetchTrainingDetailsBasedOnCourseID", courseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertCourseMaster(string title, Nullable<int> categoryID, Nullable<int> subcategoryID, Nullable<int> partnerID, string overview, string benefits, string metatitle, string metakeywords, string metadescription, Nullable<int> userID, Nullable<byte> trending)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var overviewParameter = overview != null ?
                new ObjectParameter("Overview", overview) :
                new ObjectParameter("Overview", typeof(string));
    
            var benefitsParameter = benefits != null ?
                new ObjectParameter("Benefits", benefits) :
                new ObjectParameter("Benefits", typeof(string));
    
            var metatitleParameter = metatitle != null ?
                new ObjectParameter("Metatitle", metatitle) :
                new ObjectParameter("Metatitle", typeof(string));
    
            var metakeywordsParameter = metakeywords != null ?
                new ObjectParameter("Metakeywords", metakeywords) :
                new ObjectParameter("Metakeywords", typeof(string));
    
            var metadescriptionParameter = metadescription != null ?
                new ObjectParameter("Metadescription", metadescription) :
                new ObjectParameter("Metadescription", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var trendingParameter = trending.HasValue ?
                new ObjectParameter("Trending", trending) :
                new ObjectParameter("Trending", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertCourseMaster", titleParameter, categoryIDParameter, subcategoryIDParameter, partnerIDParameter, overviewParameter, benefitsParameter, metatitleParameter, metakeywordsParameter, metadescriptionParameter, userIDParameter, trendingParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertDocument(Nullable<int> courseID, string path, Nullable<int> userID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertDocument", courseIDParameter, pathParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertExam(Nullable<int> courseID, Nullable<int> countryID, string location, Nullable<System.DateTime> examdate, Nullable<decimal> amount, Nullable<int> userID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var examdateParameter = examdate.HasValue ?
                new ObjectParameter("Examdate", examdate) :
                new ObjectParameter("Examdate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertExam", courseIDParameter, countryIDParameter, locationParameter, examdateParameter, amountParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertTraining(Nullable<int> courseID, Nullable<int> countryID, string location, Nullable<System.DateTime> startDate, Nullable<System.DateTime> enddate, string duration, Nullable<decimal> amount, Nullable<int> userID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertTraining", courseIDParameter, countryIDParameter, locationParameter, startDateParameter, enddateParameter, durationParameter, amountParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ListCourseImages_Result> ListCourseImages(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListCourseImages_Result>("ListCourseImages", courseIDParameter);
        }
    
        public virtual ObjectResult<SearchCourse_Result> SearchCourse(string title, Nullable<int> categoryID, Nullable<int> subcategoryID, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCourse_Result>("SearchCourse", titleParameter, categoryIDParameter, subcategoryIDParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<SearchMultiSubCategory_Result> SearchMultiSubCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMultiSubCategory_Result>("SearchMultiSubCategory");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int Sp_Create_Category(string catName, string catDes, Nullable<System.DateTime> create_Date, Nullable<int> updated_User, Nullable<System.DateTime> update_Date, Nullable<int> status, Nullable<bool> active)
        {
            var catNameParameter = catName != null ?
                new ObjectParameter("CatName", catName) :
                new ObjectParameter("CatName", typeof(string));
    
            var catDesParameter = catDes != null ?
                new ObjectParameter("CatDes", catDes) :
                new ObjectParameter("CatDes", typeof(string));
    
            var create_DateParameter = create_Date.HasValue ?
                new ObjectParameter("Create_Date", create_Date) :
                new ObjectParameter("Create_Date", typeof(System.DateTime));
    
            var updated_UserParameter = updated_User.HasValue ?
                new ObjectParameter("Updated_User", updated_User) :
                new ObjectParameter("Updated_User", typeof(int));
    
            var update_DateParameter = update_Date.HasValue ?
                new ObjectParameter("Update_Date", update_Date) :
                new ObjectParameter("Update_Date", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Create_Category", catNameParameter, catDesParameter, create_DateParameter, updated_UserParameter, update_DateParameter, statusParameter, activeParameter);
        }
    
        public virtual int SP_Create_Partner(string name, string logo, Nullable<bool> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Create_Partner", nameParameter, logoParameter, activeParameter);
        }
    
        public virtual int Sp_Create_SubCategory(string name, Nullable<int> catId, Nullable<System.DateTime> createDate, Nullable<int> createUser, Nullable<System.DateTime> updateDate, Nullable<bool> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createUserParameter = createUser.HasValue ?
                new ObjectParameter("CreateUser", createUser) :
                new ObjectParameter("CreateUser", typeof(int));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Create_SubCategory", nameParameter, catIdParameter, createDateParameter, createUserParameter, updateDateParameter, activeParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_FetchAllSubCategory_Result> SP_FetchAllSubCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchAllSubCategory_Result>("SP_FetchAllSubCategory");
        }
    
        public virtual ObjectResult<sp_Fetchcategorylist_Result> sp_Fetchcategorylist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Fetchcategorylist_Result>("sp_Fetchcategorylist");
        }
    
        public virtual ObjectResult<SP_FetchCourses_Result> SP_FetchCourses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchCourses_Result>("SP_FetchCourses");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int Sp_Update_Category(Nullable<int> catId, string catName, string desc, Nullable<int> updated_User, Nullable<System.DateTime> update_Date, Nullable<int> status)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var catNameParameter = catName != null ?
                new ObjectParameter("CatName", catName) :
                new ObjectParameter("CatName", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var updated_UserParameter = updated_User.HasValue ?
                new ObjectParameter("Updated_User", updated_User) :
                new ObjectParameter("Updated_User", typeof(int));
    
            var update_DateParameter = update_Date.HasValue ?
                new ObjectParameter("Update_Date", update_Date) :
                new ObjectParameter("Update_Date", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Category", catIdParameter, catNameParameter, descParameter, updated_UserParameter, update_DateParameter, statusParameter);
        }
    
        public virtual int SP_Update_Partner(Nullable<int> partnerId, string name, string logo)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_Partner", partnerIdParameter, nameParameter, logoParameter);
        }
    
        public virtual int Sp_Update_SubCategory(Nullable<int> subCatId, string name, Nullable<int> catId, Nullable<int> createUser, Nullable<System.DateTime> updateDate)
        {
            var subCatIdParameter = subCatId.HasValue ?
                new ObjectParameter("SubCatId", subCatId) :
                new ObjectParameter("SubCatId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var createUserParameter = createUser.HasValue ?
                new ObjectParameter("CreateUser", createUser) :
                new ObjectParameter("CreateUser", typeof(int));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_SubCategory", subCatIdParameter, nameParameter, catIdParameter, createUserParameter, updateDateParameter);
        }
    
        public virtual int Sp_UpdateToggle(Nullable<int> id, string domain, Nullable<bool> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var domainParameter = domain != null ?
                new ObjectParameter("Domain", domain) :
                new ObjectParameter("Domain", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateToggle", idParameter, domainParameter, statusParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spCheckLoginUser_Result> spCheckLoginUser(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckLoginUser_Result>("spCheckLoginUser", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spFetchAllSubCategory_Result> spFetchAllSubCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchAllSubCategory_Result>("spFetchAllSubCategory");
        }
    
        public virtual ObjectResult<spFetchImageDetailsBasedOnCourseID_Result> spFetchImageDetailsBasedOnCourseID(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchImageDetailsBasedOnCourseID_Result>("spFetchImageDetailsBasedOnCourseID", courseIDParameter);
        }
    
        public virtual ObjectResult<spFetchSubCategoryByCategoryID_Result> spFetchSubCategoryByCategoryID(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchSubCategoryByCategoryID_Result>("spFetchSubCategoryByCategoryID", categoryIDParameter);
        }
    
        public virtual ObjectResult<spSearchCourse_Result> spSearchCourse(string title, Nullable<int> categoryID, Nullable<int> subcategoryID)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchCourse_Result>("spSearchCourse", titleParameter, categoryIDParameter, subcategoryIDParameter);
        }
    
        public virtual ObjectResult<spSelectAllCountry_Result> spSelectAllCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectAllCountry_Result>("spSelectAllCountry");
        }
    
        public virtual int spUpdateCategoryStatus(Nullable<int> categoryID, Nullable<byte> status)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCategoryStatus", categoryIDParameter, statusParameter);
        }
    
        public virtual int spUpdateCourseMasterStatus(Nullable<int> courseID, Nullable<byte> trending)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var trendingParameter = trending.HasValue ?
                new ObjectParameter("Trending", trending) :
                new ObjectParameter("Trending", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCourseMasterStatus", courseIDParameter, trendingParameter);
        }
    
        public virtual int spUpdateCourseOnlineStatus(Nullable<int> courseID, Nullable<byte> showOnline)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var showOnlineParameter = showOnline.HasValue ?
                new ObjectParameter("ShowOnline", showOnline) :
                new ObjectParameter("ShowOnline", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCourseOnlineStatus", courseIDParameter, showOnlineParameter);
        }
    
        public virtual int spUpdatePartnerStatus(Nullable<int> partnerID, Nullable<byte> status)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePartnerStatus", partnerIDParameter, statusParameter);
        }
    
        public virtual int spUpdateSubCategoryStatus(Nullable<int> subCategoryID, Nullable<byte> status)
        {
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSubCategoryStatus", subCategoryIDParameter, statusParameter);
        }
    
        public virtual int UpdateCourseMaster(Nullable<int> courseID, string title, Nullable<int> categoryID, Nullable<int> subcategoryID, Nullable<int> partnerID, string overview, string benefits, string metatitle, string metakeywords, string metadescription, Nullable<int> userID, Nullable<byte> trending)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var overviewParameter = overview != null ?
                new ObjectParameter("Overview", overview) :
                new ObjectParameter("Overview", typeof(string));
    
            var benefitsParameter = benefits != null ?
                new ObjectParameter("Benefits", benefits) :
                new ObjectParameter("Benefits", typeof(string));
    
            var metatitleParameter = metatitle != null ?
                new ObjectParameter("Metatitle", metatitle) :
                new ObjectParameter("Metatitle", typeof(string));
    
            var metakeywordsParameter = metakeywords != null ?
                new ObjectParameter("Metakeywords", metakeywords) :
                new ObjectParameter("Metakeywords", typeof(string));
    
            var metadescriptionParameter = metadescription != null ?
                new ObjectParameter("Metadescription", metadescription) :
                new ObjectParameter("Metadescription", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var trendingParameter = trending.HasValue ?
                new ObjectParameter("Trending", trending) :
                new ObjectParameter("Trending", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourseMaster", courseIDParameter, titleParameter, categoryIDParameter, subcategoryIDParameter, partnerIDParameter, overviewParameter, benefitsParameter, metatitleParameter, metakeywordsParameter, metadescriptionParameter, userIDParameter, trendingParameter);
        }
    
        public virtual int UpdateOverview(Nullable<int> courseID, string overview, Nullable<int> userID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var overviewParameter = overview != null ?
                new ObjectParameter("Overview", overview) :
                new ObjectParameter("Overview", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOverview", courseIDParameter, overviewParameter, userIDParameter);
        }
    
        public virtual ObjectResult<FetchAllExamDetails_Result> FetchAllExamDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAllExamDetails_Result>("FetchAllExamDetails");
        }
    
        public virtual ObjectResult<FetchAllImages_Result> FetchAllImages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAllImages_Result>("FetchAllImages");
        }
    
        public virtual ObjectResult<FetchAllDocs_Result> FetchAllDocs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAllDocs_Result>("FetchAllDocs");
        }
    
        public virtual int Sp_Update_Exam(Nullable<int> examID, Nullable<int> courseID, Nullable<int> countryID, string location, Nullable<System.DateTime> examdate, Nullable<decimal> amount, Nullable<int> lastUpdateduser, Nullable<System.DateTime> lastUpdatedDatetime)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var examdateParameter = examdate.HasValue ?
                new ObjectParameter("Examdate", examdate) :
                new ObjectParameter("Examdate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var lastUpdateduserParameter = lastUpdateduser.HasValue ?
                new ObjectParameter("LastUpdateduser", lastUpdateduser) :
                new ObjectParameter("LastUpdateduser", typeof(int));
    
            var lastUpdatedDatetimeParameter = lastUpdatedDatetime.HasValue ?
                new ObjectParameter("LastUpdatedDatetime", lastUpdatedDatetime) :
                new ObjectParameter("LastUpdatedDatetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Exam", examIDParameter, courseIDParameter, countryIDParameter, locationParameter, examdateParameter, amountParameter, lastUpdateduserParameter, lastUpdatedDatetimeParameter);
        }
    
        public virtual ObjectResult<string> ChangeCategoryStatus(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ChangeCategoryStatus", categoryIDParameter);
        }
    }
}
